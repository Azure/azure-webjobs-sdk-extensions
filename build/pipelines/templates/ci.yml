## CAUTION: Changing this template will affect all pipelines that extend it.
parameters:
  - name: skip_assembly_signing
    displayName: Skip Assembly Signing
    type: boolean
    default: false
  - name: target_projects
    displayName: Projects To Build
    type: object
    default: []
  - name: target_tests
    displayName: Test Projects
    type: object
    default: []

variables:
  - template: variables.yml
  - name: targetProjects
    value: ${{ join(';',parameters.target_projects) }}
  - name: targetTests
    value: ${{ join(';',parameters.target_tests) }}

jobs:
- job: InitializePipeline
  pool: 
    name: '1ES-Hosted-AzFunc'
    demands:
      - ImageOverride -equals MMS2019TLS
  steps:
  - task: 1ESHostedPoolValidation@1

  - task: PowerShell@2
    displayName: 'Initialize'
    name: Initialize
    inputs: 
      filePath: '$(Build.Repository.LocalPath)\build\initialize-pipeline.ps1'
    ## checks the PR title for inline commands, e.g. [pack]

- job: BuildAndTest
  pool:
    name: '1ES-Hosted-AzFunc'
    demands:
      - ImageOverride -equals MMS2019TLS
  dependsOn: InitializePipeline
  condition: succeeded()
  variables:
    signPackages: $[ dependencies.InitializePipeline.outputs['Initialize.SignPackages'] ]
  steps:    
  - task: 1ESHostedPoolValidation@1

  - pwsh: |
      $packageSuffix = 0
      if (-not $$(hasTag)) {
        $packageSuffix = $(buildNumber)
        Write-Host "No git tag found. Setting package suffix to '$packageSuffix'"
      }

      if ($$(hasTag)) {
        $config = "Release"
        Write-Host "Git tag found. Setting Configuration to '$config'"
        $env:Configuration = $config
        echo "##vso[task.setvariable variable=Configuration]$config" # let downstream tasks read this variable
      }

      $projectsArray = "$(targetProjects)" -split ";"

      Write-Host "Building projects:"
      Write-Host $projectsArray -separator "`n"

      .\Build.ps1 -projects $projectsArray -buildNumber "$(buildNumber)" -packageSuffix "$packageSuffix" -outputDirectory "$(buildOutputDirectory)" -signPackages $$(signPackages) -skipAssemblySigning $${{ parameters.skip_assembly_signing }}
    displayName: "Build source"
    env:
      CommitHash: $(Build.SourceVersion)
      FILES_ACCOUNT_NAME: $(FilesAccountName)
      FILES_ACCOUNT_KEY: $(FilesAccountKey)
    ## This task also optionally signs the packages

  - pwsh: |
      $testsArray = "$(targetTests)" -split ";"

      Write-Host "Running tests:"
      Write-Host $testsArray -separator "`n"

      .\run-tests.ps1 -tests $testsArray
    displayName: "Run tests"
    ## requires env:Configuration be set to report test results
    env:
      AzureWebJobsStorage: $(Storage)
      AzureWebJobsDashboard: $(Storage)
      AzureWebJobsCosmosDBConnectionString: $(CosmosDB)
      ConnectionStrings:CosmosDB: $(CosmosDB)

  - task: PublishTestResults@2
    displayName: "Publish XUnit test results"
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/TEST.xml'
      mergeTestResults: true
      buildConfiguration: $(Configuration)
      testRunTitle: 'XUnit Tests'
    condition: always()

  - pwsh: |
      if ($$(signPackages))
      {
        Write-Host "Package signing enabled for this build. Retrieving signed files."

        .\tools\PollSigningResults.ps1 -buildNumber "$(buildNumber)" -artifactDirectory "$(buildOutputDirectory)" -skipAssemblySigning $${{ parameters.skip_assembly_signing }}
      }
      else
      {
        Write-Host "Package signing conditions not met for this build."
      }
    displayName: "Poll signing results"
    env: 
      FILES_ACCOUNT_NAME: $(FilesAccountName)
      FILES_ACCOUNT_KEY: $(FilesAccountKey)

  - task: ManifestGeneratorTask@0
    displayName: "SBOM Generation"
    inputs:
      BuildDropPath: '$(buildOutputDirectory)'
      Verbosity: 'Information'

  - publish: '$(buildOutputDirectory)'
    artifact: drop